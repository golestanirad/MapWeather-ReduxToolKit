{"version":3,"sources":["firebase/firebase.utils.js","redux/weatherSlice.js","redux/mapSlice.js","components/weatherCard/forecastWeather/forecast-weather.component.jsx","components/loaders/ClockLoader/clock-loader.component.jsx","redux/userSlice.js","App.jsx","test-code.jsx","redux/rootReducer.js","redux/store.js","index.js","components/weatherCard/weather-card.module.scss","components/weatherCard/currentWeather/current-weather.module.scss","components/weatherCard/forecastWeather/forecastCard/forecast-card.module.scss","components/searchTab/Search-Tab.module.scss","components/searchBox/search-box.module.scss","pages/home/home.module.scss","components/map/Map.module.scss","components/map/icons/heartIcon/heart-icon.module.scss","components/map/icons/circleIcon/circle-icon.module.scss","components/weatherCardList/weather-card-list.module.scss","components/favoriteTab/favorite-tab.module.scss"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","GoogleAuthProvider","firestore","weather","createSlice","name","initialState","weatherLocations","favorites","visible","expanded","isLoading","error","reducers","getWeatherStart","state","action","getWeatherSuccess","payload","locationName","Object","keys","includes","push","getWeatherFailure","addToFavoriteListSuccess","addToFavoriteListFailure","removeFromFavoriteListSuccess","_","without","removeFromFavoriteListFailure","deleteLocation","initialFavoritesFetchStart","initialFavoritesFetchSuccess","map","initialFavoritesFetchFailure","addToVisibleLocations","removeFromVisibleLocations","addToExpandedCards","removeFromExpandedCards","restWholeData","actions","currentLocation","lat","lng","makeStyles","table","row","border","cell","maxWidth","padding","insideCell","display","flexDirection","justifyContent","alignItems","fontWeight","fontSize","margin","day","borderRadius","width","icon","backgroundColor","css","userSlice","userInfo","email","uid","checkUserStatusStart","checkUserStatusSuccess","checkUserStatusFailure","loginUserStart","loginUserSuccess","loginUserFailure","App","useDispatch","useSelector","user","override","React","Component","rootReducer","combineReducers","weatherReducer","mapReducer","userReducer","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4f3153fd.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n/////// Set Up\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCBn2ciVykGZ5jzImQj1qoPojQLYMMcXEI\",\r\n  authDomain: \"map-weather-10531.firebaseapp.com\",\r\n  databaseURL: \"https://map-weather-10531.firebaseio.com\",\r\n  projectId: \"map-weather-10531\",\r\n  storageBucket: \"map-weather-10531.appspot.com\",\r\n  messagingSenderId: \"848134999340\",\r\n  appId: \"1:848134999340:web:cebf58200aa623eebf7089\",\r\n  measurementId: \"G-L04ENL8Z78\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n// provider.setCustomParameters({prompt: 'select_account'});   what does this do exactly\r\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport default firebase;\r\n////////  Methods\r\nexport const createUserProfileDocument = async (userAuth) => {\r\n   \r\n  try {\r\n    if (!userAuth) return;\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);  \r\n    const userSnapShot = await userRef.get();\r\n    if (!userSnapShot.exists)\r\n      firestore\r\n        .doc(`users/${userAuth.uid}`)\r\n        .set({ name: userAuth.displayName });\r\n    return userRef;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport _ from \"lodash\";\r\n/// project files\r\nimport {\r\n  fetchForecastWeather,\r\n  fetchCurrentWeather,\r\n  setFavoriteLocation,\r\n  deleteFavoriteLocation,\r\n  fetchFavoriteLocations,\r\n  fetchBatchWeatherLocations,\r\n} from \"../api/weatherAPI\";\r\n\r\n/*\r\nweatherLocations: {\r\n  Yerevan - AM: {\r\n    timezone: 14400,\r\n    locationName: \"Yerevan - AM\",\r\n    coord; {lat:44,lng:48},\r\n    current:{\r\n      temp: 15,\r\n      icon: \"01n\",\r\n      dt: 1590519569,\r\n      description: \"scattered clouds\"\r\n    }, \r\n    forcase: [\r\n      {\r\n        dt:1590526800,\r\n        temp: 14.93,\r\n        icon: \"01n\",\r\n        description:\"scattered clouds\"\r\n      },\r\n      ...\r\n    ],\r\n  },\r\n  ...\r\n}\r\n*/\r\nconst locationsInitialState = {\r\n  weatherLocations: {},\r\n  favorites: [],\r\n  visible: [],\r\n  expanded: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst weather = createSlice({\r\n  name: \"weather\",\r\n  initialState: locationsInitialState,\r\n  reducers: {\r\n    getWeatherStart(state, action) {\r\n      state.isLoading = true;\r\n    },\r\n    getWeatherSuccess(state, action) {\r\n      state.weatherLocations = {\r\n        ...action.payload,\r\n        ...state.weatherLocations,\r\n      };\r\n      const locationName = Object.keys(action.payload)[0];\r\n      if (!state.visible.includes(locationName)) {\r\n        state.visible.push(locationName);\r\n      }\r\n      if (!state.expanded.includes(locationName)) {\r\n        state.expanded.push(locationName);\r\n      }\r\n      state.isLoading = false;\r\n      state.error = null;\r\n    },\r\n    getWeatherFailure(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    ///////\r\n    addToFavoriteListSuccess(state, action) {\r\n      state.favorites.push(action.payload);\r\n      state.isLoading = false;\r\n    },\r\n    addToFavoriteListFailure(state, action) {\r\n      state.error = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    ///////\r\n    removeFromFavoriteListSuccess(state, action) {\r\n      state.favorites = _.without(state.favorites, action.payload);\r\n    },\r\n    removeFromFavoriteListFailure(state, action) {\r\n      state.error = action.payload;\r\n    },\r\n    //////////\r\n    deleteLocation(state, action) {\r\n      delete state.weatherLocations[action.payload];\r\n    },\r\n    ////////\r\n    initialFavoritesFetchStart(state, action) {\r\n      state.isLoading = true;\r\n    },\r\n    initialFavoritesFetchSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.weatherLocations = { ...state.weatherLocations, ...action.payload };\r\n      state.favorites = Object.keys(action.payload);\r\n\r\n      const locationsName = Object.keys(action.payload);\r\n      locationsName.map((locationName) => {\r\n        if (!state.visible.includes(locationName)) {\r\n          state.visible.push(locationName);\r\n        }\r\n        if (!state.expanded.includes(locationName)) {\r\n          state.expanded.push(locationName);\r\n        }\r\n      });\r\n    },\r\n    initialFavoritesFetchFailure(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    //////////\r\n    addToVisibleLocations(state, action) {\r\n      state.visible.push(action.payload);\r\n    },\r\n    removeFromVisibleLocations(state, action) {\r\n      state.visible = _.without(state.visible, action.payload);\r\n    },\r\n    //////////\r\n    addToExpandedCards(state, action) {\r\n      state.expanded.push(action.payload);\r\n    },\r\n    removeFromExpandedCards(state, action) {\r\n      state.expanded = _.without(state.expanded, action.payload);\r\n    },\r\n    ///////\r\n    restWholeData(state) {\r\n      state.weatherLocations = {};\r\n      state.favorites = [];\r\n      state.visible = [];\r\n    },\r\n    /////////\r\n  },\r\n});\r\n\r\nexport const {\r\n  getWeatherStart,\r\n  getWeatherSuccess,\r\n  getWeatherFailure,\r\n  addToFavoriteListSuccess,\r\n  addToFavoriteListFailure,\r\n  removeFromFavoriteListSuccess,\r\n  removeFromFavoriteListFailure,\r\n  deleteLocation,\r\n  initialFavoritesFetchStart,\r\n  initialFavoritesFetchSuccess,\r\n  initialFavoritesFetchFailure,\r\n  addToVisibleLocations,\r\n  removeFromVisibleLocations,\r\n  restWholeData,\r\n  addToExpandedCards,\r\n  removeFromExpandedCards,\r\n} = weather.actions;\r\n\r\nexport default weather.reducer;\r\n\r\n///// Thunks\r\n\r\nexport const getWeather = (lat, lng) => async (dispatch) => {\r\n  try {\r\n    dispatch(getWeatherStart());\r\n    const result = await Promise.all([\r\n      fetchCurrentWeather(lat, lng),\r\n      fetchForecastWeather(lat, lng),\r\n    ]);\r\n    const current = result[0].data;\r\n    const forecast = result[1].data;\r\n    const weatherData = makeWeatherData(current, forecast);\r\n    dispatch(getWeatherSuccess(weatherData));\r\n  } catch (error) {\r\n    console.log(\"getWeather errorrrrrrr\", error);\r\n    dispatch(getWeatherFailure(error));\r\n  }\r\n};\r\n\r\nexport const addToFavoriteList = (uid, location) => async (dispatch) => {\r\n  try {\r\n    const { locationName } = location;\r\n    setFavoriteLocation(uid, location);\r\n    dispatch(addToFavoriteListSuccess(locationName));\r\n  } catch (error) {\r\n    console.log(\"addToFavoriteList errorrrrrrr\", error);\r\n    dispatch(addToFavoriteListFailure(error));\r\n  }\r\n};\r\n\r\nexport const removeFromFavoriteList = (uid, location) => async (dispatch) => {\r\n  try {\r\n    const { locationName } = location;\r\n    await deleteFavoriteLocation(uid, location);\r\n    dispatch(removeFromFavoriteListSuccess(locationName));\r\n  } catch (error) {}\r\n};\r\n\r\nexport const initialFavoritesFetch = (uid) => async (dispatch) => {\r\n  try {\r\n    if (uid) {\r\n      dispatch(initialFavoritesFetchStart());\r\n      const favoriteLocationsLatLng = [];\r\n      const favoriteLocationsSnapshot = await fetchFavoriteLocations(uid);\r\n      favoriteLocationsSnapshot.forEach((doc) => {\r\n        favoriteLocationsLatLng.push(doc.data());\r\n      });\r\n      const weatherOfFavoriteLocations = await fetchBatchWeatherLocations(\r\n        favoriteLocationsLatLng\r\n      );\r\n\r\n      if (weatherOfFavoriteLocations.length > 0) {\r\n        const finalWeatherDataForFavoriteLocations = {};\r\n        weatherOfFavoriteLocations.forEach(({ current, forecast }) => {\r\n          const weatherData = makeWeatherData(current, forecast);\r\n          Object.assign(finalWeatherDataForFavoriteLocations, weatherData);\r\n        });\r\n\r\n        dispatch(\r\n          initialFavoritesFetchSuccess(finalWeatherDataForFavoriteLocations)\r\n        );\r\n      }\r\n    } else {\r\n      ///\r\n    }\r\n  } catch (error) {\r\n    console.log(\"initialFavoritesFetch errorrrrrrr\", error);\r\n    dispatch(initialFavoritesFetchFailure(error));\r\n  }\r\n};\r\n\r\n//// Helpers\r\nconst makeWeatherData = (current, forecast) => {\r\n  const { city, list } = forecast;\r\n  const { main, weather, dt, coord } = current;\r\n  const weatherData = {\r\n    [city.name + \" - \" + city.country]: {\r\n      timezone: city.timezone,\r\n      locationName: city.name + \" - \" + city.country,\r\n      coord: { lat: coord.lat, lng: coord.lon },\r\n      current: {\r\n        temp: main.temp,\r\n        icon: weather[0].icon,\r\n        dt,\r\n        description: weather[0].description,\r\n      },\r\n      forecast: list.map(({ main, weather, dt }) => {\r\n        return {\r\n          temp: main.temp,\r\n          icon: weather[0].icon,\r\n          dt,\r\n          description: weather[0].description,\r\n        };\r\n      }),\r\n    },\r\n  };\r\n  return weatherData;\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst mapInitialState = {\r\n  currentLocation: { lat: 49.2827, lng: -123.1207 },\r\n};\r\n\r\nconst map = createSlice({\r\n  name: \"map\",\r\n  initialState: mapInitialState,\r\n  reducers: {\r\n    currentLocation(state, action) {\r\n      state.currentLocation = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { currentLocation } = map.actions;\r\n\r\nexport default map.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport shortID from \"shortid\";\r\n/// project files\r\nimport styles from \"./forecast-weather.module.scss\";\r\nimport ForecastCard from \"./forecastCard/forecast-card.component\";\r\nimport { converUnixTime } from \"../../../utils/time\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {},\r\n  row: {\r\n    border: \"2px solid gray\",\r\n  },\r\n  cell: {\r\n    maxWidth: \"35px\",\r\n    padding: \"6px\",\r\n  },\r\n  insideCell: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"10px\",\r\n    margin: \"2px\",\r\n  },\r\n  day: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    fontSize: \"15px\",\r\n    fontWeight: \"bold\",\r\n    borderRadius: \"10px\",\r\n    width: \"37px\",\r\n    padding: \"0 2px\",\r\n  },\r\n  icon: {\r\n    backgroundColor: \"gray\",\r\n  },\r\n});\r\n\r\nconst ForecastWeather = ({ location }) => {\r\n  //// Props\r\n  const { forecast, timezone } = location;\r\n\r\n  ///// Hooks\r\n  const classes = useStyles();\r\n\r\n  ////Helpers\r\n  const createForecaseData = (forecast) => {\r\n    const trimedForecastData = [];\r\n    forecast.map((item) => {\r\n      const dayOfWeek = converUnixTime(item.dt, timezone, \"ddd\");\r\n      const timeOfDay = converUnixTime(item.dt, timezone, \"HH:MM\");\r\n      const dayOfMonth = converUnixTime(item.dt, timezone, \"MMM/DD\");\r\n      const timeSlice = {};\r\n      timeSlice[\"temp\"] = Math.round(item.temp);\r\n      timeSlice[\"icon\"] = item.icon;\r\n      timeSlice[\"dayOfWeek\"] = dayOfWeek;\r\n      timeSlice[\"timeOfDay\"] = timeOfDay;\r\n      timeSlice[\"dayOfMonth\"] = dayOfMonth;\r\n      trimedForecastData.push(timeSlice);\r\n    });\r\n\r\n\r\n    let day = trimedForecastData[0].dayOfWeek;\r\n    const finalForcastData = [];\r\n    let daySlice = {};\r\n    let whichForecast = 9;\r\n    trimedForecastData.map((item) => {\r\n      if (item.dayOfWeek === day) whichForecast--;\r\n    });\r\n\r\n    trimedForecastData.map((item) => {\r\n      if (item.dayOfWeek !== day) {\r\n        finalForcastData.push(daySlice);\r\n        daySlice = {};\r\n        day = item.dayOfWeek;\r\n        whichForecast = 1;\r\n      }\r\n      daySlice[\"day\"] = item.dayOfWeek;\r\n      daySlice[\"dayOfMonth\"] = item.dayOfMonth;\r\n      switch (whichForecast) {\r\n        case 1:\r\n          daySlice[\"firstForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 2:\r\n          daySlice[\"secondForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 3:\r\n          daySlice[\"thirdForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 4:\r\n          daySlice[\"fourthForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 5:\r\n          daySlice[\"fifthForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 6:\r\n          daySlice[\"sixthForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 7:\r\n          daySlice[\"seventhForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n        case 8:\r\n          daySlice[\"eighthForecast\"] = {\r\n            temp: item.temp,\r\n            icon: item.icon,\r\n            timeOfDay: item.timeOfDay,\r\n          };\r\n          whichForecast++;\r\n          break;\r\n      }\r\n      //   if (whichForecast === 1) {\r\n      //     daySlice[\"firstForecast\"] = {\r\n      //       temp: item.temp,\r\n      //       icon: item.icon,\r\n      //       timeOfDay: item.timeOfDay,\r\n      //     };\r\n      //     whichForecast++;\r\n      //   } else {\r\n      //     if (whichForecast === 2) {\r\n      //       daySlice[\"secondForecast\"] = {\r\n      //         temp: item.temp,\r\n      //         icon: item.icon,\r\n      //         timeOfDay: item.timeOfDay,\r\n      //       };\r\n      //       whichForecast++;\r\n      //     } else {\r\n      //       if (whichForecast === 3) {\r\n      //         daySlice[\"thirdForecast\"] = {\r\n      //           temp: item.temp,\r\n      //           icon: item.icon,\r\n      //           timeOfDay: item.timeOfDay,\r\n      //         };\r\n      //         whichForecast++;\r\n      //       } else {\r\n      //         if (whichForecast === 4) {\r\n      //           daySlice[\"fourthForecast\"] = {\r\n      //             temp: item.temp,\r\n      //             icon: item.icon,\r\n      //             timeOfDay: item.timeOfDay,\r\n      //           };\r\n      //           whichForecast++;\r\n      //         } else {\r\n      //           if (whichForecast === 5) {\r\n      //             daySlice[\"fifthForecast\"] = {\r\n      //               temp: item.temp,\r\n      //               icon: item.icon,\r\n      //               timeOfDay: item.timeOfDay,\r\n      //             };\r\n      //             whichForecast++;\r\n      //           } else {\r\n      //             if (whichForecast === 6) {\r\n      //               daySlice[\"sixthForecast\"] = {\r\n      //                 temp: item.temp,\r\n      //                 icon: item.icon,\r\n      //                 timeOfDay: item.timeOfDay,\r\n      //               };\r\n      //               whichForecast++;\r\n      //             } else {\r\n      //               if (whichForecast === 7) {\r\n      //                 daySlice[\"seventhForecast\"] = {\r\n      //                   temp: item.temp,\r\n      //                   icon: item.icon,\r\n      //                   timeOfDay: item.timeOfDay,\r\n      //                 };\r\n      //                 whichForecast++;\r\n      //               } else {\r\n      //                 if (whichForecast === 8) {\r\n      //                   daySlice[\"eighthForecast\"] = {\r\n      //                     temp: item.temp,\r\n      //                     icon: item.icon,\r\n      //                     timeOfDay: item.timeOfDay,\r\n      //                   };\r\n      //                   whichForecast++;\r\n      //                 }\r\n      //               }\r\n      //             }\r\n      //           }\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   }\r\n    });\r\n   \r\n    return finalForcastData;\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={classes.table}>\r\n      <Table size=\"small\" aria-label=\"a dense table\">\r\n        <TableBody style={{ width: \"100px\" }}>\r\n          {createForecaseData(forecast).map((row) => (\r\n            <TableRow className={classes.row} key={shortID.generate()}>\r\n              <TableCell className={classes.cell} align=\"right\">\r\n                <div className={classes.day}>\r\n                  <span>{row.dayOfMonth}</span>\r\n                  <span>{row.day}</span>\r\n                </div>\r\n              </TableCell>\r\n              {[\r\n                \"firstForecast\",\r\n                \"secondForecast\",\r\n                \"thirdForecast\",\r\n                \"fourthForecast\",\r\n                \"fifthForecast\",\r\n                \"sixthForecast\",\r\n                \"seventhForecast\",\r\n                \"eighthForecast\",\r\n              ].map((forcasetSlice) => (\r\n                <TableCell\r\n                  key={shortID.generate()}\r\n                  className={classes.cell}\r\n                  align=\"right\"\r\n                >\r\n                  {row[forcasetSlice] && (\r\n                    <ForecastCard\r\n                      timeOfDay={row[forcasetSlice].timeOfDay}\r\n                      temp={row[forcasetSlice].temp}\r\n                      icon={row[forcasetSlice].icon}\r\n                    />\r\n                  )}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default ForecastWeather;\r\n","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport _ClockLoader from \"react-spinners/ClockLoader\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 5px auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst ClockLoader = () => {\r\n  /// Return\r\n  return (\r\n    <_ClockLoader css={override} size={40} color={\"#123abc\"} loading={true} />\r\n  );\r\n};\r\nexport default ClockLoader;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n/// project files\r\nimport { auth, firestore, googleSignIn } from \"../firebase/firebase.utils\";\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    userInfo: { name: null, email: null, uid: null },\r\n    isLoading: false,\r\n    error: null,\r\n  },\r\n\r\n  reducers: {\r\n    checkUserStatusStart(state, action) {\r\n      state.isLoading = true;\r\n    },\r\n    checkUserStatusSuccess(state, action) {\r\n      const { name, email, uid } = action.payload;\r\n      state.userInfo = { name, email, uid };\r\n      state.isLoading = false;\r\n    },\r\n    checkUserStatusFailure(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    loginUserStart(state, action) {\r\n      state.isLoading = true;\r\n    },\r\n    loginUserSuccess(state, action) {\r\n      state.isLoading = false;\r\n    },\r\n    loginUserFailure(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  checkUserStatusStart,\r\n  checkUserStatusSuccess,\r\n  checkUserStatusFailure,\r\n  loginUserFailure,\r\n  loginUserStart,\r\n  loginUserSuccess,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n\r\n//// Thunks\r\nexport const checkUserStatus = (user) => async (dispatch) => {\r\n  try {\r\n    dispatch(checkUserStatusStart());\r\n    if (!user) {\r\n      dispatch(checkUserStatusSuccess({ name: null, email: null, uid: null }));\r\n      return;\r\n    }\r\n    const userRef = firestore.collection(\"users\").doc(user.uid);\r\n    if (!userRef.exists)\r\n      await userRef.set({\r\n        name: user.displayName,\r\n        email: user.email,\r\n        uid: user.uid,\r\n      });\r\n    dispatch(\r\n      checkUserStatusSuccess({\r\n        name: user.displayName,\r\n        email: user.email,\r\n        uid: user.uid,\r\n      })\r\n    );\r\n  } catch (error) {\r\n    console.log(\"error at login userrrrrrrr\", error);\r\n    dispatch(checkUserStatusFailure(error));\r\n  }\r\n};\r\n\r\nexport const loginUser = () => (dispatch) => {\r\n  try {\r\n    dispatch(loginUserStart());\r\n    googleSignIn();\r\n    dispatch(loginUserSuccess());\r\n  } catch (error) {\r\n    dispatch(loginUserFailure(error));\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n//// project files\r\nimport \"./App.css\";\r\nimport Home from \"./pages/home/home.component\";\r\nimport About from \"./pages/about/about.component\";\r\nimport { currentLocation } from \"./redux/mapSlice\";\r\nimport { getWeather, initialFavoritesFetch } from \"./redux/weatherSlice\";\r\nimport { checkUserStatus } from \"./redux/userSlice\";\r\nimport { auth } from \"./firebase/firebase.utils\";\r\nimport { fetchFavoriteLocations } from \"./api/weatherAPI\";\r\n\r\nconst App = () => {\r\n  //// Hooks\r\n  const dispatch = useDispatch();\r\n\r\n  const uid = useSelector((state) => state.user.userInfo.uid);\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(\r\n  //     ({ coords: { latitude, longitude } }) => {\r\n  //       dispatch(currentLocation({ lat: latitude, lng: longitude }));\r\n  //       dispatch(getWeather(latitude, longitude));\r\n  //     }\r\n  //   );\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const unsubscribeFromAuth = auth.onAuthStateChanged((user) => {\r\n  //     dispatch(checkUserStatus(user));\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     unsubscribeFromAuth();\r\n  //   };\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(initialFavoritesFetch(uid));\r\n  // }, [uid]);\r\n\r\n  /// Return\r\n  return (\r\n    // <Router>\r\n    //   <Switch>\r\n    //     <Route exact path=\"/\">\r\n    //       <Home />\r\n    //     </Route>\r\n    //     <Route exact path=\"/about\">\r\n    //       <About />\r\n    //     </Route>\r\n    //   </Switch>\r\n    // </Router>\r\n    <div>:)</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n////  1) add map - DONE\r\n//// 2) weather icons - DONE\r\n//// 3) make a list of search location under the map instead of only one card - DONE\r\n//// 4) add search input - DONE\r\n//// 5) add favorite list and icon - DONE\r\n///// 6) add favorite - DONE\r\n////  7) add loading - DONE\r\n////// 8) move scroll to the top after adding to the list - DONE\r\n//// 9) keep the last location on map - DONE\r\n/// 10) pin locations on the map with temperature on the pin - DONE\r\n///// 11) handle error (for instance, city not found)\r\n/////  12) customize pins on map - DONE\r\n///// 13  BUG , making favorite will jump the list to teh top  - DONE\r\n///14) read favorite from main list - DONE\r\n///// 15) set my corrent location at start - DONE\r\n///// 16)  make not favorite one as a circle on the map - DONE\r\n//// 17) remove cards capability - DONE\r\n/////18 ) BUG  when using search box, the mao marker is very off - DONE\r\n//// 19) add weather forcats ;) - DONE\r\n//// 20)  click on a more icon on a card and then get all the data in a popup\r\n//// 21) add login attempt for favorite sections - DONE\r\n//// 22) add favorite to firestore - DONE\r\n///// 23) BUG make sure deleting a favorite item won't affect its being-favorite and if its back it should still be favorite - DONE\r\n//// 24) remove favorite from firestore - DONE\r\n///// 25) fetch user favorites after loggin in - DONE\r\n//// 26) add display-eye icon instead of deleteing - DONE\r\n//// 27) BUG - after logging in, the  slected location won't turn into favorite - DONE\r\n//// BUG 28)  after adding a new one all colapsed ones will open again - DONE\r\n///// 29) remove libs that you don't need\r\n///// 30) go on react-native ........... :)\r\n","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClockLoader from \"react-spinners/ClockLoader\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red; \r\n`;\r\n\r\nexport default class AwesomeComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div  style={{ backgroundColor:\"pink\" }}>\r\n        <ClockLoader\r\n          css={override}      \r\n          size={30}\r\n          color={\"#123abc\"}\r\n          loading={this.state.loading}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\n/// project files\r\nimport weatherReducer from \"./weatherSlice\";\r\nimport mapReducer from \"./mapSlice\";\r\nimport userReducer from \"./userSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n  map: mapReducer,\r\n  user: userReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n/// project files\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n///// project files\r\nimport App from \"./App\";\r\nimport TestCode from './test-code';\r\nimport store from \"./redux/store\";\r\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"weather-card_container__3JHUV\",\"bar\":\"weather-card_bar__6RXbt\",\"icon\":\"weather-card_icon__1vPvu\",\"name\":\"weather-card_name__Fb8bt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"current-weather_container__wKpuE\",\"iconAnddTemp\":\"current-weather_iconAnddTemp__3K77A\",\"icon\":\"current-weather_icon__BM6wD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"forecast-card_container__1qZsT\",\"icon\":\"forecast-card_icon__-TpST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Search-Tab_container__2o8sR\",\"list\":\"Search-Tab_list__205Im\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"search-box_container__2vE2e\",\"algolia\":\"search-box_algolia__2XrLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__17Yf0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Map_container__2covr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"heart-icon_text__Rz5Uj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"circle-icon_text__1K2zY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"weather-card-list_container__1KhbA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"favorite-tab_container__1Q--y\"};"],"sourceRoot":""}